import streamlit as st
from time import time
import os
from models.db.connector import DBConnector
from models.query.maneger import QueryManeger
from models.query.parser import QueryParser


st.set_page_config('Trabalho Consultas', page_icon='üë®‚Äçüíª', layout='wide')
st.title('Envio e Otimiza√ß√£o de Consultas')

with st.form('Formul√°rio de Envio de consultas'):
    # A string com a consulta SQL √© entrada na interface gr√°fica 
    user_query = st.text_area(
        'Campo de consultas', placeholder='Digite sua consulta aqui.')
    submit = st.form_submit_button('Enviar')
if submit:
    with st.spinner('Iniciando conex√£o com o Banco...', show_time=True):
        # connector = DBConnector(
        #     os.environ['HOST'], os.environ['USER'], os.environ['PASSWORD'], 
        #     os.environ['DATABASE']
        # )
        # connector.start_connection()
        print('aqui')
    st.write(
        f'''
        **Requisi√ß√£o executada**
        ```
        {user_query}
        ```
        ''')
    # query_result = connector.execute_query(user_query)
    # TODO A string √© parseada e o comando SQL √© validado al√©m de validar se as tabelas existem e se 
    
    # TODO os campos informados no select existem nas tabelas 
    
    # TODO O comando SQL √© convertido para √°lgebra relacional 
    
    # TODO Mostrar na Interface a convers√£o do SQL para √°lgebra relacional 
    
    # TODO A √°lgebra relacional √© otimizada conforme as heur√≠sticas solicitadas (ver item 5) 
    
    # TODO O grafo de operadores √© constru√≠do em mem√≥ria 
    
    # TODO O grafo de operadores deve ser mostrado na Interface gr√°fica 
    
    # TODO O resultado da consulta mostrando cada opera√ß√£o e a ordem que ser√° executada, √© exibido 
    # na interface gr√°fica (plano de execu√ß√£o) 
